# Deploying and Managing Cloud Services

# Select a subsciption to use for cloud services
$subscriptionName = "your_subscirption_name"
Select-AzureSubscription -SubscriptionName $subscriptionName

# Get all affinity groups
Get-AzureAffinityGroup # or
Get-AzureAffinityGroup | Format-Table -Property Name, Label, Location

# Create a Affinity Group
New-AzureAffinityGroup -Name SEA-DC -Label "Applications in Southeast Asia" -Location "Southeast Asia"

# Get all affinity groups
Set-AzureAffinityGroup -Name SEA-DC -Label "Used for cloud services in Southeast Asia"

# Remove a affinity group
Remove-AzureAffinityGroup -Name SEA-DC

# Specify a cloud service name which will be created
$newCloudServiceName = "new_cloud_service_name"

# Test if a storage account or service names is used. False = not used
Test-AzureName -Service $newCloudServiceName # Test-AzureName -Storage mystorageaccount

# Create a new cloud service 
New-AzureService -ServiceName $newCloudServiceName -Location "Southeast Asia" -Description "A test cloud service" -Label "A Cloud Service Created via New-AzureService PowerShell cmdlet"

# Lists all versions of guest OS that are currently available in Windows Azure
Get-AzureOSVersion 
# or
Get-AzureOSVersion | Format-Table -Property Family, FamilyLabel, IsActive, IsDefault, Label, Version -AutoSize

# Set the current storage account for the current subscription which will be used for deployments
$storageAccountName = "storage_account_name"
Set-AzureSubscription -SubscriptionName $subscriptionName -CurrentStorageAccount $storageAccountName

# Create a new deployment under a cloud service using package and configuration file generated by Visual Studio 2010/2012
$packageFilePath = "path_to_package_file"
$configurationFilePath = "path_to_configuration_file"
New-AzureDeployment -ServiceName $newCloudServiceName -Package $packageFilePath -Configuration $configurationFilePath -Slot Staging -Label "A new Deployment @ 2013-01-17"

# Perform a VIP Swap
Move-AzureDeployment -ServiceName $newCloudServiceName

# Get details for a specific deployment
Get-AzureDeployment -ServiceName $newCloudServiceName -Slot Production

# Get deployment role information
Get-AzureRole -ServiceName $newCloudServiceName -Slot Production
Get-AzureRole -ServiceName $newCloudServiceName -Slot Production -InstanceDetails

# Reboot a role instance
Reset-AzureRoleInstance -ServiceName $newCloudServiceName -Slot Production -InstanceName MvcWebRole1_IN_0 -Reboot

# Update the configuration file, set the instance count to 2
Set-AzureDeployment -config -ServiceName $newCloudServiceName -Slot Production -Configuration "new_configuration_file_path"

# Start or suspend the deployment status
Set-AzureDeployment -Status -ServiceName $newCloudServiceName -Slot Production -NewStatus Suspended

# Remove a deployment
Remove-AzureDeployment -ServiceName $newCloudServiceName -Slot Staging -Force

# Add a certificate to cloud service
$pfxCertificatePath = "pfx_certificate_file_path"
$pfxCertificatePassword = "xxx"
$pfxCertificateThumbprint = "xxx"
Add-AzureCertificate -ServiceName $newCloudServiceName -CertToDeploy $pfxCertificatePath -Password $pfxCertificatePassword

# list all certificates under a cloud service
Get-AzureCertificate -ServiceName $newCloudServiceName

# remove a certificate form a cloud service
Remove-AzureCertificate -ServiceName $newCloudServiceName -Thumbprint $pfxCertificateThumbprint -ThumbprintAlgorithm sha1

# Remove a cloud service
Remove-AzureService -ServiceName $newCloudServiceName -Force






